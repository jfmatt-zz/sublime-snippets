<!--
	This snippet generates all the basic functions for a Wordpress widget.
	The model I use defines a static array of default instance variables, then makes liberal use of wp_parse_args
		to make sure that there's always a value defined when possible.
	update() is complete as generated, so long as there's a default defined for every instance variable;
		it will save the new value for every key that exists in the static defaults array.

<snippet>
    <content><![CDATA[
class $1 extends WP_Widget {
	public static \$defaults;
	function __construct() {
		parent::__construct("$1", "${2:title}", array(
		        'classname' => "$1", 'description' => "${3:description}"
		));
	}

	function form(\$instance) {
		\$instance = wp_parse_args(\$instance, $1::\$defaults);

	}

	function update(\$new, \$old) {
	    	\$old = wp_parse_args(\$old, $1::\$defaults);
	    	\$instance = \$old;
	    	foreach ($1::\$defaults as \$key => \$value) {
	    		\$instance[\$key] = \$new[\$key];
	    	}
	    	return \$instance;
	}

	function widget(\$args, \$instance) {
	    	\$instance = wp_parse_args(\$instance, $1::\$defaults);
		echo \$args['before_widget'];


		echo \$args['after_widget'];
	}
}
$1::\$defaults = array($0
);

add_action( 'widgets_init', create_function('', 'return register_widget("$1");') );
]]></content>
    <!-- Optional: Tab trigger to activate the snippet -->
    <tabTrigger>wp_widget</tabTrigger>
    <!-- Optional: Scope the tab trigger will be active in -->
    <scope>source.php</scope>
    <!-- Optional: Description to show in the menu -->
    <description>WP Widget</description>
</snippet>
